datasheetconnrowdb_timestampdb_addressdb_to_addressdb_amounttable_limitENDgetPKCS1_v1_5Received quit commandCheck balancecolumnSELECT sum(amount) FROM transactions WHERE address = '' OR to_address = '127.0.0.1' ORDER BY block_height DESC LIMIT 19;[XBM] BismuthBalance: textAmount:widthReceived node start commandmainloopAF_INET<module>Crypto.HashSELECT sum(amount) FROM transactions WHERE to_address = 'Crypto.SignatureClient: New txhash to go with your transaction: readamount_inputspent_msgkeysha224EWfileRSApadyimageSend BismuthsignaturenewTkreceived_msgButtonclosestart_bfromtimestampto_address_inputsocketfetchonebalance_getEntryYour latest transactions:Cannot connect to local node, please start it firstReceived tx commandstrftimeSELECT * FROM transactions WHERE address = 'ledger.dbsigner%Y-%m-%d %H:%M:%SSHAgraphics\icon.icopublic_keygraphics\logo.gifReceived Total: gui_addressdatetimeimportKeyRefresh tableClient: The signature and control txhash is valid, proceeding to send transaction, signature, new txhash and the public keybalance_msgwm_titlepublic_key_readablecreditdebittxhash_newverifySELECT txhash FROM transactions ORDER BY block_height DESC LIMIT 1;Connectedb64encodebalance_enumeratorgridhashlibClient: Encoded Signature: f3f2publickeyf5f4iconbitmapLooks like a new addressbase64š™™™™™¹?signature_encverifierYour Address:exitQuitLabelSpent Total: SOCK_STREAMCrypto.PublicKeysleepquit_bcursorClient: Invalid signatureRecipient:Client: Signature OK, but cannot use negative amountsexecuteNode: Transction address balance: balance_bpadxapp_quitstickysqlite3justifysend_bhexdigestFrameprivkey.derStart nodesendallcolumnspandestroyTkinterRIGHTexportKeyPhotoImageprivate_key_readableappendC:\Users\kucerjan\Documents\GitHub\XBM-Bismuth\gui.pyrootC:\Python27\python.exeverbosebinflushvalue* pygtk-runtime: "%s._putenv" successful
* pygtk-runtime: "kernel32.SetEnvironmentVariableW" failed
writefind_msvcrt* pygtk-runtime: "msvcrt._putenv" successful
cdllWarningctypes* pygtk-runtime: original PATH="%s"
* pygtk-runtime: "kernel32.SetEnvironmentVariableW" successful
pathsepenviron
    :param name: environment variable name
    :param value: environment variable value

    This function ensures that changes to an environment variable are applied
    to each copy of the environment variables used by a process. Starting from
    Python 2.4, os.environ changes only apply to the copy Python keeps (os.environ)
    and are no longer automatically applied to the other copies for the process.

    On Microsoft Windows, each process has multiple copies of the environment
    variables, one managed by the OS and one managed by the C library. We also
    need to take care of the fact that the C library used by Python is not
    necessarily the same as the C library used by PyGTK and friends. This because
    the latest releases of PyGTK and friends are built with mingw32 and are thus
    linked against msvcrt.dll. The official GTK+ binaries have always been built
    in this way.
    * pygtk-runtime: "%s._putenv" failed
splitLoadLibrarystderrC:\Python27\lib\site-packages\gtk-2.0\runtimejoinplatformresultmsvcrtname* pygtk-runtime: prepending "%s" to PATH
ABSPATHwindll* pygtk-runtime: "msvcrt._putenv" failed
* pygtk-runtime: "%s" already on PATH
* pygtk-runtime: modified PATH="%s"
RUNTIMEflagsdirnamewin32C:\Python27\lib\site-packages\gtk-2.0\runtime\__init__.pyctypes.utilabspath%s=%slensysiteropenreprrangeinsertxrange__all____cmp____doc__compileinspect__dict____exit____file____iter____main____name____path__exc_type__class____enter__exc_value__import____module____delattr____getattr____setattr____builtins____metaclass__exc_traceback